####################################
#   Cache Simulator Config File    #
####################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

# See http://doc.akka.io/docs/akka/current/general/configuration.html
akka {
  loglevel = WARNING

  default-mailbox {
    mailbox-capacity = 10
    mailbox-type = akka.dispatch.BoundedMailbox
  }
  actor.mailbox.bounded-queue-based.mailbox-push-timeout-time = -1
}

caffeine.simulator {
  report {
    # Formats: table, csv
    format = table

    # Columns: policy, hit rate, hits, misses, evictions, admit rate, steps, time
    sort-by = policy
    ascending = true

    # The output destination, either the console or a file path
    output = console
  }

  # The seed for randomized operations
  random-seed = 1033096058

  # The number of events to send per actor message
  batch-size = 1000

  # The maximum number of entries in the cache
  maximum-size = 512

  policies = [
    # Policies that provide an optimal upper bound
    opt.Clairvoyant,

    # Policies based on the LIRS algorithm
    irr.Lirs,
    irr.ClockPro,
    irr.ClockProSimple,
  ]

  clockpro {
    # The percentage for the minimum resident cold entries
    percent-min-resident-cold = 0.01
    # The percentage for the maximum resident cold entries
    percent-max-resident-cold = 0.99
    # The lower bound for the number of resident cold entries
    lower-bound-resident-cold = 2
    # The multiple of the maximum size dedicated to non-resident entries
    non-resident-multiplier = 2.0
  }

  clockproplus {
    # The percentage for the minimum resident cold entries
    percent-min-resident-cold = 0.01
    # The percentage for the maximum resident cold entries
    percent-max-resident-cold = 0.5
    # The lower bound for the number of resident cold entries
    lower-bound-resident-cold = 2
    # The multiple of the maximum size dedicated to non-resident entries
    non-resident-multiplier = 1.0
  }

  trace {
    # files: reads from the trace file(s)
    # synthetic: reads from a synthetic generator
    source = files

    # The number of events to skip
    skip = 0
    # The number of events to process or null if unbounded
    limit = null
  }

  files {
    # The paths to the trace files or the file names if in the format's package. To use a mix of
    # formats, specify the entry in the form "{format}:{path}", e.g. "lirs:loop.trace.gz".
    paths = [ multi1.trace.gz ]

    # arc: format from the authors of the ARC algorithm
    # adapt-size: format from the authors of the AdaptSize algorithm
    # address: format of UCSD program address traces
    # address-penalties: format of UCSD program address traces with hit & miss penalties
    # cache2k: format from the author of the Cache2k library
    # camelab: format from the Camelab storage traces
    # climb: format from the authors of the AdaptiveClimb algorithm
    # corda: format of Corda traces
    # gradle: format from the authors of the Gradle build tool
    # lirs: format from the authors of the LIRS algorithm
    # lrb: format from the authors of the LRB algorithm
    # outbrain: format from Outbrain trace provided on Kaggle
    # scarab: format of Scarab Research traces
    # snia-cambridge: format from the SNIA MSR Cambridge traces
    # snia-k5cloud: format from the SNIA K5cloud traces
    # snia-object-store: format from the SNIA IBM ObjectStore traces
    # snia-tencent-block: format from the SNIA Tencent Block traces
    # snia-tencent-photo: format from the SNIA Tencent Photo traces
    # twitter: format from the Twitter Cache Cluster traces
    # umass-storage: format from the University of Massachusetts storage traces
    # umass-youtube: format from the University of Massachusetts youtube traces
    # wikipedia: format from the WikiBench request traces
    format = lirs
  }

  synthetic {
    # The number of events to generate
    events = 10000

    # counter, uniform, exponential, hotspot, zipfian, scrambled-zipfian, or skewed-zipfian-latest
    distribution = scrambled-zipfian

    # A sequence of unique integers starting from...
    counter.start = 1

    # A sequence that is generated from the specified set uniformly randomly
    uniform {
      lower-bound = 1
      upper-bound = 1000
    }

    # A sequence based on an exponential distribution with a mean arrival rate of gamma
    exponential.mean = 1.0

    # A sequence resembling a hotspot distribution where x% of operations access y% of data items
    hotspot {
      # The lower bound of the distribution
      lower-bound = 1
      # The upper bound of the distribution
      upper-bound = 1000
      # The percentage of the of the interval which comprises the hot set
      hotset-fraction = 0.25
      # The percentage of operations that access the hot set
      hot-opn-fraction = 0.25
    }

    # A sequence where some items are more popular than others, according to a zipfian distribution
    zipfian {
      # The number of items
      items = 5000

      # The skewness factor
      constant = 0.99

      # A zipfian sequence that scatters the "popular" items across the item space. Use if you don't
      # want the head of the distribution (the popular items) clustered together.
      scrambled {}

      # A zipfian sequence with a popularity distribution of items, skewed to favor recent items
      # significantly more than older items
      skewed-zipfian-latest {}
    }
  }
}
